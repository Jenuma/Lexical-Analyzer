--------------------------------------
Token				Lexeme
--------------------------------------
IDENTIFIER			import
IDENTIFIER			java.util.
MUL_OP				*
SEMICOLON			;
IDENTIFIER			public
IDENTIFIER			class
IDENTIFIER			BCasting
LEFT_BRACE			{
IDENTIFIER			public
IDENTIFIER			static
IDENTIFIER			void
IDENTIFIER			main
LEFT_PARENTHESIS		(
IDENTIFIER			String
LEFT_BRACKET			[
RIGHT_BRACKET			]
IDENTIFIER			args
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			Scanner
IDENTIFIER			input
ASSIGN_OP			=
IDENTIFIER			new
IDENTIFIER			Scanner
LEFT_PARENTHESIS		(
IDENTIFIER			System.in
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			int
IDENTIFIER			trys
ASSIGN_OP			=
IDENTIFIER			input.nextInt
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			for
LEFT_PARENTHESIS		(
IDENTIFIER			int
IDENTIFIER			i
ASSIGN_OP			=
INT_LITERAL			0
SEMICOLON			;
IDENTIFIER			i
LT_OP				<
IDENTIFIER			trys
SEMICOLON			;
IDENTIFIER			i
ADD_OP				+
ADD_OP				+
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
IDENTIFIER			i
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			int
IDENTIFIER			waste
ASSIGN_OP			=
IDENTIFIER			input.nextInt
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			int
IDENTIFIER			base
ASSIGN_OP			=
IDENTIFIER			input.nextInt
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			String
IDENTIFIER			number
ASSIGN_OP			=
IDENTIFIER			input.next
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			if
LEFT_PARENTHESIS		(
IDENTIFIER			base
EQ_OP				==
INT_LITERAL			10
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
IDENTIFIER			waste
ADD_OP				+
STRING_CONSTANT			" "
ADD_OP				+
LEFT_PARENTHESIS		(
IDENTIFIER			int
RIGHT_PARENTHESIS		)
LEFT_PARENTHESIS		(
IDENTIFIER			Integer.parseInt
LEFT_PARENTHESIS		(
IDENTIFIER			number
RIGHT_PARENTHESIS		)
IDENTIFIER			%
INT_LITERAL			9
RIGHT_PARENTHESIS		)
RIGHT_PARENTHESIS		)
SEMICOLON			;
RIGHT_BRACE			}
IDENTIFIER			else
LEFT_BRACE			{
IDENTIFIER			int
IDENTIFIER			length
ASSIGN_OP			=
IDENTIFIER			number.length
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			double
IDENTIFIER			temp
ASSIGN_OP			=
INT_LITERAL			0
SEMICOLON			;
IDENTIFIER			for
LEFT_PARENTHESIS		(
IDENTIFIER			int
IDENTIFIER			j
ASSIGN_OP			=
INT_LITERAL			0
SEMICOLON			;
IDENTIFIER			j
LT_OP				<
IDENTIFIER			length
SEMICOLON			;
IDENTIFIER			j
ADD_OP				+
ADD_OP				+
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			int
IDENTIFIER			val
ASSIGN_OP			=
IDENTIFIER			Integer.parseInt
LEFT_PARENTHESIS		(
IDENTIFIER			number.charAt
LEFT_PARENTHESIS		(
IDENTIFIER			length
SUB_OP				-
IDENTIFIER			j
SUB_OP				-
INT_LITERAL			1
RIGHT_PARENTHESIS		)
ADD_OP				+
IDENTIFIER			double
IDENTIFIER			t1
ASSIGN_OP			=
LEFT_PARENTHESIS		(
IDENTIFIER			Math.pow
LEFT_PARENTHESIS		(
IDENTIFIER			base,
IDENTIFIER			j
RIGHT_PARENTHESIS		)
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			double
IDENTIFIER			t
ASSIGN_OP			=
IDENTIFIER			t1
MUL_OP				*
IDENTIFIER			val
SEMICOLON			;
IDENTIFIER			temp
ASSIGN_OP			=
IDENTIFIER			temp
ADD_OP				+
IDENTIFIER			t
SEMICOLON			;
RIGHT_BRACE			}
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
IDENTIFIER			waste
ADD_OP				+
STRING_CONSTANT			" "
ADD_OP				+
LEFT_PARENTHESIS		(
IDENTIFIER			int
RIGHT_PARENTHESIS		)
LEFT_PARENTHESIS		(
IDENTIFIER			temp
IDENTIFIER			%
LEFT_PARENTHESIS		(
IDENTIFIER			base
SUB_OP				-
INT_LITERAL			1
RIGHT_PARENTHESIS		)
RIGHT_PARENTHESIS		)
RIGHT_PARENTHESIS		)
SEMICOLON			;
RIGHT_BRACE			}
RIGHT_BRACE			}
IDENTIFIER			input.close
LEFT_PARENTHESIS		(
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			System.exit
LEFT_PARENTHESIS		(
INT_LITERAL			0
RIGHT_PARENTHESIS		)
SEMICOLON			;
RIGHT_BRACE			}
RIGHT_BRACE			}
