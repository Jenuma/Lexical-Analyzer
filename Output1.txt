--------------------------------------
Token				Lexeme
--------------------------------------
IDENTIFIER			package
IDENTIFIER			edu.southalabama.csc333fall2012
SEMICOLON			;
IDENTIFIER			public
IDENTIFIER			class
IDENTIFIER			Test1
LEFT_BRACE			{
IDENTIFIER			public
IDENTIFIER			static
IDENTIFIER			void
IDENTIFIER			main
LEFT_PARENTHESIS		(
IDENTIFIER			String
LEFT_BRACKET			[
RIGHT_BRACKET			]
IDENTIFIER			args
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			int
IDENTIFIER			A
ASSIGN_OP			=
INT_LITERAL			25
SEMICOLON			;
IDENTIFIER			float
IDENTIFIER			B
ASSIGN_OP			=
LEFT_PARENTHESIS		(
IDENTIFIER			float
RIGHT_PARENTHESIS		)
REAL_LITERAL			123.4
IDENTIFIER			double
IDENTIFIER			myC
SEMICOLON			;
IDENTIFIER			int
IDENTIFIER			D
ASSIGN_OP			=
INT_LITERAL			0
SEMICOLON			;
IDENTIFIER			char
IDENTIFIER			E
ASSIGN_OP			=
CHARACTER_CONSTANT		'a'
SEMICOLON			;
IDENTIFIER			myC
ASSIGN_OP			=
LEFT_PARENTHESIS		(
LEFT_PARENTHESIS		(
IDENTIFIER			A
MUL_OP				*
IDENTIFIER			A
RIGHT_PARENTHESIS		)
ADD_OP				+
LEFT_PARENTHESIS		(
IDENTIFIER			A
SUB_OP				-
IDENTIFIER			B
RIGHT_PARENTHESIS		)
RIGHT_PARENTHESIS		)
DIV_OP				/
INT_LITERAL			50
SEMICOLON			;
IDENTIFIER			for
LEFT_PARENTHESIS		(
IDENTIFIER			int
IDENTIFIER			x
ASSIGN_OP			=
INT_LITERAL			0
SEMICOLON			;
IDENTIFIER			x
LT_OP				<
INT_LITERAL			10
SEMICOLON			;
IDENTIFIER			x
ASSIGN_OP			=
IDENTIFIER			x
ADD_OP				+
INT_LITERAL			1
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			if
LEFT_PARENTHESIS		(
IDENTIFIER			x
LTE_OP				<=
INT_LITERAL			1
OR_OP				||
IDENTIFIER			x
EQ_OP				==
INT_LITERAL			5
AND_OP				&&
IDENTIFIER			x
NEQ_OP				!=
INT_LITERAL			8
RIGHT_PARENTHESIS		)
LEFT_BRACE			{
IDENTIFIER			D
ASSIGN_OP			=
IDENTIFIER			D
ADD_OP				+
INT_LITERAL			10
SEMICOLON			;
RIGHT_BRACE			}
IDENTIFIER			else
LEFT_BRACE			{
IDENTIFIER			D
ASSIGN_OP			=
IDENTIFIER			D
ADD_OP				+
INT_LITERAL			15
SEMICOLON			;
RIGHT_BRACE			}
RIGHT_BRACE			}
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
STRING_CONSTANT			"This is the D answer =>"
ADD_OP				+
IDENTIFIER			D
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
STRING_CONSTANT			"This is the C answer =>"
ADD_OP				+
IDENTIFIER			myC
RIGHT_PARENTHESIS		)
SEMICOLON			;
IDENTIFIER			System.out.println
LEFT_PARENTHESIS		(
STRING_CONSTANT			"A character like "
ADD_OP				+
IDENTIFIER			E
ADD_OP				+
STRING_CONSTANT			" can be printed easily"
RIGHT_PARENTHESIS		)
SEMICOLON			;
RIGHT_BRACE			}
RIGHT_BRACE			}
